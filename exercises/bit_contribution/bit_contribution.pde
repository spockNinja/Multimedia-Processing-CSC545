//Shows contribution to image of each bit of pixel

// Use 0-8 to see the different bit masks
// Use space to toggle the masks

//images[0] is original; images[1] is image generated by
//least significant bit; images[2] is next bit, etc
PImage[] images1 = new PImage[9];
PImage[] images2 = new PImage[9];
PImage[] currentImages;
PImage currentImage;
int imageIdx = 0;
boolean drawn = false;
boolean usingFirstMaskSet = true;

//masks[0] is a dummy - it is never used

// These masks show the contribution of ONLY the bit in question
int[] masks1 = {255, 1, 2, 4, 8, 16, 32, 64, 128};

// These masks show the contribution of all other bits
int[] masks2 = {255, 254, 253, 251, 247, 239, 223, 191, 127};

void setup() {
  int r, g, b;
  color c;
  size(500, 500);
  surface.setResizable(true);
  images1[0] = loadImage("bridge.jpg");
  images2[0] = images1[0];
  surface.setSize(images1[0].width, images1[0].height);
  images1[0].loadPixels();
  currentImage = images1[0];

  for (int i = 1; i < images1.length; i++) {
    images1[i] = createMaskedImage(currentImage, i, masks1);
    images2[i] = createMaskedImage(currentImage, i, masks2);
  }

  currentImages = images1;
}

PImage createMaskedImage(PImage src, int idx, int[] masks) {
    PImage masked = createImage(src.width, src.height, RGB);
    int mask = masks[idx];
    int shift = 8 - idx;

    for (int i = 0; i < src.pixels.length; i++) {
        color srcPixel = src.pixels[i];
        int r = int(red(srcPixel)) & mask;
        int g = int(green(srcPixel)) & mask;
        int b = int(blue(srcPixel)) & mask;

        r <<= shift;
        g <<= shift;
        b <<= shift;
        masked.pixels[i] = color(r, g, b);
    }
    masked.updatePixels();

    return masked;
}

void draw() {
    if (!drawn) {
        image(currentImage, 0, 0);
        drawn = true;
    }
}

void keyReleased() {
    if (key == ' ') {
        if (usingFirstMaskSet) {
            currentImages = images2;
        }
        else {
            currentImages = images1;
        }
        usingFirstMaskSet = !usingFirstMaskSet;
    }
    else {
        imageIdx = Character.getNumericValue(key);

    }
    if (imageIdx >= 0 && imageIdx < currentImages.length) {
        currentImage = currentImages[imageIdx];
        drawn = false;
    }
}
